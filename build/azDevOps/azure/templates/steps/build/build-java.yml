parameters:
  repo_root_dir: ""
  project_root_dir: ""
  pipeline_scripts_directory: ""
  # Maven
  maven_cache_directory: ""
  maven_surefire_reports_dir: ""
  maven_allowed_test_tags: ""
  # Docker Config
  docker_build_container: ""
  # Vulnerability Scanning
  vulnerability_scan: true
  vulnerability_scan_api_key: "$(VULNERABILITY_SCAN_API_KEY)"
  vulnerability_scan_fail_build_on_detection: true
  vulnerability_scan_database_directory: ""
  project_type: ""

steps:
  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | ${{ parameters.project_root_dir }}/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: "${{ parameters.project_root_dir }}/${{ parameters.maven_cache_directory }}"
    displayName: Cache Maven packages (${{ parameters.project_type }})

  - ${{ if eq(parameters.vulnerability_scan, true) }}:
      - task: Bash@3
        inputs:
          targetType: "inline"
          script: |
            DATE="$(date "+%F")"
            HOUR="$(date "+%H")"
            # NVD Cache lasts 4 hours (240 mins) and so cache based on the hour's time
            # in 24 hours. E.g. 0-3 are 0, 1-4 are 1, 20-23 are 5 etc.. This gives a
            # cache that lasts roughly 4 hours at a time.
            HOUR_BY_FOUR="$(( ${HOUR} / 4 ))"
            NVD_CACHE_FILE="${DATE}-${HOUR_BY_FOUR}"
            echo "echoing to a file '${{ parameters.repo_root_dir }}/.nvd-cache-day' with value '${DATE}'"
            echo "echoing to a file '${{ parameters.repo_root_dir }}/.nvd-cache-full' with value '${NVD_CACHE_FILE}'"
            # Partial (slow) download lasts 24 hours
            echo "${DATE}" > ${{ parameters.repo_root_dir }}/.nvd-cache-day
            # Full Cache is 4 hours, so use the by four computed variable
            echo "${NVD_CACHE_FILE}" > ${{ parameters.repo_root_dir }}/.nvd-cache-full
        displayName: Set NVD Cache Variable

      - task: Cache@2
        inputs:
          key: '${{ parameters.repo_root_dir }}/.nvd-cache-day | ${{ parameters.repo_root_dir }}/.nvd-cache-full'
          restoreKeys: |
            ${{ parameters.repo_root_dir }}/.nvd-cache-day
          path: "${{ parameters.vulnerability_scan_database_directory }}"
        displayName: Cache NVD Database

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-install.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Install Packages (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-checkstyle-check.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Checkstyle Check (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-format-check.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Format Check (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-spotbugs-check.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Spotbugs Check (${{ parameters.project_type }})"

  - ${{ if eq(parameters.vulnerability_scan, true) }}:
      - task: Bash@3
        inputs:
          filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-owasp-dependency-check.bash"
          arguments: >
            -W "${{ parameters.vulnerability_scan_database_directory }}"
            -X "${{ parameters.vulnerability_scan_api_key }}"
            -Y "${{ parameters.vulnerability_scan_fail_build_on_detection }}"
            -Z "${{ parameters.maven_cache_directory }}"
          workingDirectory: "${{ parameters.project_root_dir }}"
        env:
          LC_ALL: "C.UTF-8"
        target:
          container: ${{ parameters.docker_build_container }}
        displayName: "Maven: OWASP Vulnerability Scan (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/build-maven-compile.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Maven: Compile Application (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-download-test-deps.bash"
      arguments: >
        -X "${{ parameters.maven_allowed_test_tags }}"
        -Y "${{ parameters.maven_surefire_reports_dir }}"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Download Test Deps (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
      arguments: >
        -a "Unit"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Unit tests (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
      arguments: >
        -a "Component"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Component tests (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-tagged-test-run.bash"
      arguments: >
        -a "Integration"
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Test: Integration tests (${{ parameters.project_type }})"

  - task: Bash@3
    inputs:
      filePath: "${{ parameters.pipeline_scripts_directory }}/test-maven-generate-jacoco-report.bash"
      arguments: >
        -Z "${{ parameters.maven_cache_directory }}"
      workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: ${{ parameters.docker_build_container }}
    displayName: "Generate Jacoco coverage reports (${{ parameters.project_type }})"

  # TODO: Pull this out into a bash script?
  - bash: |
      set -euxo pipefail
      cp "${{ parameters.repo_root_dir }}/build/azDevOps/azure/coverage/"* .
      npm ci
      ./node_modules/.bin/gulp inline-css-images
      ./node_modules/.bin/gulp inline-sources
    workingDirectory: "${{ parameters.project_root_dir }}/target/site/"
    target:
      container: node
    displayName: "Gulp: Inline Jacoco report assets (${{ parameters.project_type }})"
